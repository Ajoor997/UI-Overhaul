// Icône d'évacuation
UnitLabelUnitEvacIconBUCKComponent is BUCKTextureDescriptor
(
    ElementName = "EvacuationIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [23.0, 23.0]
        AlignementToFather = [0.5, 0.0]
        AlignementToAnchor = [0.5, 0.0]
    )

    TextureFrame = TUIFramePropertyRTTI(RelativeWidthHeight = [1.0, 1.0])
    TextureToken = "icone_evacuation"
    LocalRenderLayer = 1
)

//----------------------------------------------------------------------
// Nom du joueur
UnitLabelUnitPlayerNameBUCKComponent is BUCKTextDescriptor
(
    ElementName = "PlayerName"
    ComponentFrame = TUIFramePropertyRTTI
    (
        AlignementToFather = [0.5, 0.0]
        AlignementToAnchor = [0.5, 0.0]
    )

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    TextStyle = "PlayerName"
    HasBackground = false
    TextPadding = TRTTILength4(Magnifiable = [1.0, 1.0, 1.0, 1.0])
    HorizontalFitStyle = ~/FitStyle/FitToContent
    VerticalFitStyle = ~/FitStyle/FitToContent

    TypefaceToken = "UIMainFont"
    BigLineAction = ~/BigLineAction/CutByDots

    TextDico = ~/LocalisationConstantes/dico_interface_ingame

    TextColor = "Fulda_Turquoise"
    TextSize = "20"
    LocalRenderLayer = 1
)

//----------------------------------------------------------------------
// Nom de l'unité
template UnitLabelUnitNameBUCKComponent
[
    Alignement : float2 = [0.0, 0.0],
    IsForMultiSelection : bool = false,
    IsForCarriedUnit : bool = false,
    LocalRenderLayer : int,
]
is BUCKTextDescriptor
(
    ElementName = <IsForCarriedUnit> ? 'CarriedUnitName' : 'UnitName'
    ComponentFrame = TUIFramePropertyRTTI
    (
        AlignementToFather = <Alignement>
        AlignementToAnchor = <Alignement>
    )

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Left
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    HasBackground = true
    BackgroundLocalRenderLayer = <LocalRenderLayer>
    LocalRenderLayer = <LocalRenderLayer> + 1
    TextPadding = <IsForMultiSelection> ? TRTTILength4(Magnifiable = [3.0, 0.0, 3.0, 0.0]) : TRTTILength4(Magnifiable = [3.0, 1.0, 3.0, 1.0])

    HorizontalFitStyle = ~/FitStyle/FitToContent
    VerticalFitStyle = ~/FitStyle/FitToContent

    BigLineAction = ~/BigLineAction/CutByDots

    TextDico = ~/LocalisationConstantes/dico_interface_ingame
    TextStyle = "Default"
    TypefaceToken = "UISecondFont"
    TextColor = "Blanc"
    TextSize = (<IsForCarriedUnit> ? "10" :  "14")
)

//----------------------------------------------------------------------
// Nombre de groupes d'unités
template UnitGroupCount
[
    LocalRenderLayer : int
]
is BUCKTextDescriptor
(
    ElementName = "UnitGroupCount"
    ComponentFrame = TUIFramePropertyRTTI
    (
        AlignementToFather = [0.5, 1.0]
        AlignementToAnchor = [0.5, 1.0]
    )

    LocalRenderLayer = <LocalRenderLayer>

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    TextStyle = "Default"
    TypefaceToken = "UISecondFont"
    TextPadding = TRTTILength4(Magnifiable = [2.0, 1.0, 3.0, 1.0])
    HorizontalFitStyle = ~/FitStyle/FitToContent
    VerticalFitStyle = ~/FitStyle/FitToContent

    TextColor = "Blanc"
    TextSize = "14"

    Components =
    [
        PanelRoundedCorner
        (
            BackgroundBlockColorToken = "Noir"
            BorderLineColorToken = "Gris_pi"
            Radius = 3
            BackgroundLocalRenderLayer = <LocalRenderLayer> - 1
            BorderLocalRenderLayer = <LocalRenderLayer> - 1
        )
    ]
)

//----------------------------------------------------------------------
// Icône d'unité

LabelUnitIconWidthHeight is [36.0, 36.0]

private UnitLabelUnitIcon is BUCKTextureDescriptor
(
    ElementName = "UnitIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = ~/LabelUnitIconWidthHeight
        AlignementToFather = [0.0, 0.5]
        AlignementToAnchor = [0.0, 0.5]
    )

    HasBorder = false
    BorderThicknessToken = '2'
    BorderLineColorToken = 'Blanc'
    HasBackground = true
    BackgroundLocalRenderLayer = 1
    LocalRenderLayer = 2
    ChildFitToContent = true

    TextureFrame   = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = [1.0, 1.0]
    )

    ClipTextureToComponent = true

    Components =
    [
        UnitLabelCarriedUnitIcon(LocalRenderLayer = 3),
        BUCKListDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                AlignementToFather = [0.0, 1.0]
                AlignementToAnchor = [0.0, 1.0]
            )

            Axis = ~/ListAxis/Vertical
            InterItemMargin = TRTTILength(Magnifiable = 0.1)

            Elements =
            [
                BUCKListElementDescriptor(ComponentDescriptor = UnitLabelUnitMoraleGaugeBUCKComponent(LocalRenderLayer = 3)),
                BUCKListElementSpacer(Magnifiable = 1.0),
                BUCKListElementDescriptor(ComponentDescriptor = UnitLabelHPGaugeBUCKComponent(LocalRenderLayer = 3))
            ]
        ),
        UnitLabelUnitExperienceIconsBUCKComponent(LocalRenderLayer = 3),
        UnitLabelSpecialtyIcon(LocalRenderLayer = 3),
        RadarActivityIcon(LocalRenderLayer = 3),
        SmartChipList(LocalRenderLayer = 3),
    ]
)

//----------------------------------------------------------------------
// Fond de l'étiquette
// les couleurs (background et lignes) sont spécifiées directement dans PlayerUIHelper.ndf
template UnitLabelBackground
[
    LocalRenderLayer : int,
    MagnifiableWidthHeight : float2 = [40.0, 40.0],
    FrameMagnifiableWidthHeight : float2 = [40.0, 40.0],
]
is BUCKSensibleAreaDescriptor
(
    ElementName = "BackgroundSensibleArea"

    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = <MagnifiableWidthHeight>
    )

    Components =
    [
        BUCKTextureDescriptor
        (
            ElementName = "Background"
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 1.0]
            )

            BackgroundLocalRenderLayer = <LocalRenderLayer> - 1
            LocalRenderLayer = <LocalRenderLayer>
            HasBorder = false
            BorderThicknessToken = "2"
            BorderLineColorToken = "Blanc"

            TextureFrame   = TUIFramePropertyRTTI
            (
                MagnifiableWidthHeight = <FrameMagnifiableWidthHeight>
                AlignementToFather = [0.5, 0.5]
                AlignementToAnchor = [0.5, 0.5]
            )

            ClipTextureToComponent = false
        )
    ]
)

//----------------------------------------------------------------------
// Icône de transport
template UnitLabelCarriedUnitIcon
[
    LocalRenderLayer : int,
    MagnifiableOffset : float2 = [-3.0, 0.0]
]
is BUCKTextureDescriptor
(
    ElementName = 'CarriedUnitIcon'
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [20.0, 20.0]
    )

    LocalRenderLayer = <LocalRenderLayer>

    TextureFrame = TUIFramePropertyRTTI(RelativeWidthHeight = [1.0, 1.0])
)

//----------------------------------------------------------------------
// Icône de spécialité
template UnitLabelSpecialtyIcon
[
    LocalRenderLayer : int,
]
is BUCKTextureDescriptor
(
    ElementName = "SpecialtyIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [10.0, 10.0]
        AlignementToFather = [1.0, 1.0]
        AlignementToAnchor = [1.0, 1.0]
    )

    LocalRenderLayer = <LocalRenderLayer>

    TextureFrame = TUIFramePropertyRTTI(RelativeWidthHeight = [1.0, 1.0])
)

// -------------------------------------------------------------------------------------------------
// Icone pour les armes a Radar
template RadarActivityIcon
[
    LocalRenderLayer : int,
] is BUCKTextureDescriptor
(
    ElementName = "RadarIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [16.0, 16.0]
        AlignementToFather     = [0.05, 0.95]
        AlignementToAnchor     = [0.0, 1.0]
    )

    TextureFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight    = [1.0, 1.0]
        AlignementToFather     = [0.5, 0.5]
        AlignementToAnchor     = [0.5, 0.5]
    )

    TextureToken = 'icone_PourPanelSelectionRdr'
    TextureColorToken = 'Blanc220'
    LocalRenderLayer = <LocalRenderLayer>
)

//----------------------------------------------------------------------
// Text de Smart Order actif
template SmartOrderText
[
    LocalRenderLayer : int
]
is BUCKTextDescriptor
(
    ElementName = "SmartOrderText"
    ComponentFrame = TUIFramePropertyRTTI(MagnifiableWidthHeight = [10.0, 10.0])

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    BigLineAction = ~/BigLineAction/ResizeFont

    BackgroundLocalRenderLayer = <LocalRenderLayer>
    LocalRenderLayer = <LocalRenderLayer>+1

    HasBackground = true
    BackgroundBlockColorToken = "VividRed"

    TextStyle = "Default"

    TypefaceToken = "UIMainFont"

    TextDico = ~/LocalisationConstantes/dico_interface_ingame

    TextColor = "SD2_BlancPur"
    TextSize = "10"
)

//----------------------------------------------------------------------
// Numéro de smart group
template SmartGroupText
[
    LocalRenderLayer : int
]
is BUCKTextDescriptor
(
    ElementName = "SmartGroupText"

    ComponentFrame = TUIFramePropertyRTTI(MagnifiableWidthHeight = [10.0, 10.0])

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    BackgroundLocalRenderLayer = <LocalRenderLayer>
    LocalRenderLayer = <LocalRenderLayer>+1

    HasBackground = true
    BackgroundBlockColorToken = "Cyan"

    TextStyle = "Default"

    TypefaceToken = "UIMainFont"

    TextDico = ~/LocalisationConstantes/dico_interface_ingame

    TextColor = "SD2_NoirPur"
    TextSize = "10"
)

//----------------------------------------------------------------------

template SmartChipList
[
    LocalRenderLayer : int
] is BUCKListDescriptor
(
    ElementName = "SmartChipList"

    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [0.0, 10.0]
    )

    Axis = ~/ListAxis/Horizontal

    Elements =
    [
        BUCKListElementDescriptor
        (
            ComponentDescriptor = SmartGroupText(LocalRenderLayer = <LocalRenderLayer>)
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = SmartOrderText(LocalRenderLayer = <LocalRenderLayer>)
        ),
    ]
)

//----------------------------------------------------------------------
// Icône de couverture
template UnitLabelCoverIcon
[
    LocalRenderLayer : int,
    IsForMultiSelection : bool = false,
]
is BUCKTextureDescriptor
(
    ElementName = "CoverIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [40.0, 40.0]
        MagnifiableOffset = (<IsForMultiSelection> ? [25.0, 0.0] : [0.0, 0.0])
        AlignementToFather = [0.5, 0.5]
        AlignementToAnchor = [0.5, 0.5]
    )

    LocalRenderLayer = <LocalRenderLayer>

    TextureFrame   = TUIFramePropertyRTTI( RelativeWidthHeight = [1.0, 1.0] )
    TextureColorToken = "playerHelper/Otan_line"
)

//----------------------------------------------------------------------
// Icône de rechargement
template UnitLabelUnitReloadIconBUCKComponent
[
    MagnifiableOffset : float2 = [0.0, 0.0],
    LocalRenderLayer : int,
]
is BUCKChronoAnimatedTextureDescriptor
(
    ElementName = "ReloadIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [22.0, 22.0]
        MagnifiableOffset = <MagnifiableOffset>
        AlignementToFather = [0.5, 0.0]
        AlignementToAnchor = [0.5, 0.0]
    )

    ChronoDrawer = $/UserInterface/ChronoDrawerCommon

    ChronoTexture = "icone_reticule"
    TextureToken = "icone_reticule_vide"

    ChronoTextureColor0 = "Transparent"
    // A configurer via AimingDefaultColor
    ChronoTextureColor1 = "Cyan"

    TextureFrame = TUIFramePropertyRTTI(RelativeWidthHeight = [1.0, 1.0])

    LocalRenderLayer = <LocalRenderLayer>
)

//----------------------------------------------------------------------
// Chronographe de sortie de district
template UnitLabelUnitLeavingDistrictChronoBUCKComponent
[
    MagnifiableOffset : float2 = [-70.0, 0.0],
    AlignementToFather : float2 = [0.0, 0.0],
    AlignementToAnchor : float2 = [0.0, 0.0],
    LocalRenderLayer : int,
]
is BUCKChronoAnimatedTextureDescriptor
(
    ElementName = "LeavingDistrictChrono"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [15.0, 15.0]
        MagnifiableOffset = <MagnifiableOffset>
        AlignementToFather = <AlignementToFather>
        AlignementToAnchor = <AlignementToAnchor>
    )

    ChronoDrawer = $/UserInterface/ChronoDrawerCommon

    ChronoTexture = "icone_chrono_district"
    TextureToken = "icone_chrono_district"

    ChronoTextureColor0 = "Noir"
    ChronoTextureColor1 = "Cyan"
    LocalRenderLayer = <LocalRenderLayer>

    TextureFrame = TUIFramePropertyRTTI(RelativeWidthHeight = [1.0, 1.0])
)

//----------------------------------------------------------------------
UnitLabelUnitSupplyExtraGaugeText is BUCKTextDescriptor
(
    ElementName = "ExtraGaugesText"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [4.0, 0.0]
        RelativeWidthHeight = [0.0, 1.0]
    )

    HorizontalFitStyle = ~/FitStyle/UserDefined
    VerticalFitStyle = ~/FitStyle/UserDefined

    TextDico = ~/LocalisationConstantes/dico_interface_ingame
    TextStyle = "Default"
    TypefaceToken = "UIMainFont"
    TextColor = "Gold"
    TextSize = "12"
    TextToken = "CHAT_PLUS"

    TextPadding = TRTTILength4(Magnifiable = [8.0, 0.0, 0.0, 2.0])

    ParagraphStyle = ~/paragraphStyleTextBottomLeftAlign
    BigLineAction = ~/BigLineAction/ResizeFont
    Rotation = -90
    LocalRenderLayer = 1
)

//----------------------------------------------------------------------
UnitLabelUnitSupplyGaugeBUCKComponent is BUCKSimpleGaugeDescriptor
(
    ElementName = "SupplyGauge"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [4.0, 30.0]
        AlignementToFather = [0.0, 1.0]
        AlignementToAnchor = [0.0, 1.0]
    )

    Axis = ~/ListAxis/Vertical
    GaugeComponentNames = ["SupplyGaugeValue"]

    HasBackground = true
    BackgroundBlockColorToken = "Black40"
    BackgroundLocalRenderLayer = 1
    LocalRenderLayer = 3

    GaugeMax = 1000
    GraduationStep = 125
    InvertGraduations = true // Gauge goes bottom up

    Components =
    [
        BUCKSimpleGaugeValueDescriptor
        (
            ElementName = "SupplyGaugeValue"
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                AlignementToAnchor = [0.5, 1.0]
                AlignementToFather = [0.5, 1.0]
            )

            HasBorder = true
            BorderLineColorToken = "UnitLabel/SupplyGaugeBorder"
            BorderThicknessToken = "1"
            BorderLocalRenderLayer = 2

            HasBackground = true
            BackgroundBlockColorToken = "UnitLabel/SupplyGauge"
            BackgroundLocalRenderLayer = 2

            GraduationThicknessToken = "1"
            GraduationColorToken = "UnitLabel/SupplyGaugeBorder"
        ),
    ]
)

// -------------------------------------------------------------------------------------------------
// Liste des icones additionnels
template OverlayIconContainer
[
    MagnifiableIconSize : float = 32.0,
    LocalRenderLayer : int,
] is BUCKContainerDescriptor
(
    ElementName = "OverlayIconList"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [<MagnifiableIconSize>, <MagnifiableIconSize>]
        AlignementToAnchor = [0.5, 0.0]
        AlignementToFather = [0.5, 0.0]
    )

    Components =
    [
        OverlayIconWithChrono
        (
            ElementName = "LeavingDistrictIcon"
            TextureToken = 'icone_leave'
            TextureColorToken = 'Blanc220'
            MagnifiableWidthHeight = [<MagnifiableIconSize>, <MagnifiableIconSize>]
            ChronoIconElement = UnitLabelUnitLeavingDistrictChronoBUCKComponent
            (
                MagnifiableOffset = [0.0, 0.0]
                LocalRenderLayer = <LocalRenderLayer>
            )
            LocalRenderLayer = <LocalRenderLayer>
        ),
        OverlayIcon
        (
            ElementName = "StunIcon"
            TextureToken = 'icone_stun'
            TextureColorToken = 'Blanc220'
            MagnifiableWidthHeight = [<MagnifiableIconSize>, <MagnifiableIconSize>]
            LocalRenderLayer = <LocalRenderLayer>
        ),
        OverlayIcon
        (
            ElementName = "PinnedIcon"
            TextureToken = 'icone_pinned'
            MagnifiableWidthHeight = [<MagnifiableIconSize>, <MagnifiableIconSize>]
            LocalRenderLayer = <LocalRenderLayer>
        ),
        OverlayIcon
        (
            ElementName = "RoutIcon"
            TextureToken = 'icone_rout'
            MagnifiableWidthHeight = [<MagnifiableIconSize>, <MagnifiableIconSize>]
            LocalRenderLayer = <LocalRenderLayer>
        )
    ]
)

// -------------------------------------------------------------------------------------------------
// Icone additionel
template OverlayIcon
[
    ElementName : string,
    TextureToken : string,
    MagnifiableWidthHeight : float2,
    TextureColorToken : string = "Rouge",
    LocalRenderLayer : int,
] is BUCKTextureDescriptor
(
    ElementName = <ElementName>
    TextureToken = <TextureToken>
    LocalRenderLayer = <LocalRenderLayer>
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = <MagnifiableWidthHeight>
        AlignementToFather  = [0.0, 1.0]
        AlignementToAnchor  = [0.0, 1.0]
    )
    TextureFrame = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = [1.0, 1.0]
        AlignementToFather  = [0.0, 1.0]
        AlignementToAnchor  = [0.0, 1.0]
    )
    TextureColorToken = <TextureColorToken>
)

//----------------------------------------------------------------------
template OverlayIconWithChrono
[
    ElementName : string,
    TextureToken : string,
    MagnifiableWidthHeight : float2,
    TextureColorToken : string = "Rouge",
    ChronoIconElement : TBUCKContainerDescriptor,
    LocalRenderLayer : int,
] is BUCKContainerDescriptor
(
    ElementName = <ElementName>
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [32.0, 16.0]
        AlignementToFather  = [0.0, 1.0]
        AlignementToAnchor  = [0.0, 1.0]
    )

    Components =
    [
        OverlayIcon
        (
            ElementName = <ElementName> + "_Texture"
            TextureToken = <TextureToken>
            MagnifiableWidthHeight = <MagnifiableWidthHeight>
            TextureColorToken = <TextureColorToken>
            LocalRenderLayer = <LocalRenderLayer>
        ),
        <ChronoIconElement>,
    ]
)

//----------------------------------------------------------------------
// Morale Gauge
template UnitLabelUnitMoraleGaugeBUCKComponent
[
    ElementName = "MoraleGauge",
    AlignementToFather : float2 = [0.5, 0.0],
    AlignementToAnchor : float2 = [0.5, 0.0],
    LocalRenderLayer : int,
] is BUCKSimpleGaugeDescriptor
(
    ElementName = <ElementName>
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [32.0, 2.0]
        AlignementToFather = <AlignementToFather>
        AlignementToAnchor = <AlignementToAnchor>
    )

    Axis = ~/ListAxis/Horizontal
    GaugeComponentNames = [<ElementName> + "Value"]
    LocalRenderLayer = <LocalRenderLayer>+1

    Components =
    [
        BUCKSimpleGaugeValueDescriptor
        (
            ElementName = <ElementName> + "Value"
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [0.0, 1.0]
                MagnifiableWidthHeight = [0.0, 0.0]
                AlignementToFather     = [0.0, 0.5]
                AlignementToAnchor     = [0.0, 0.5]
            )

            HasBackground = true
            BackgroundBlockColorToken = "Blanc"
            BackgroundLocalRenderLayer = <LocalRenderLayer>
        ),
    ]
)

//----------------------------------------------------------------------
// Health point gauge
template UnitLabelHPGaugeBUCKComponent
[
    ElementName = "HPGauge",
    LocalRenderLayer,
] is BUCKSimpleGaugeDescriptor
(
    ElementName = <ElementName>
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [0.0, 4.0] //La largeur est calculée dans le code à partir de MagnifiableWidthOneHPLabelBlock
        AlignementToFather = [0.5, 0.0]
        AlignementToAnchor = [0.5, 0.0]
    )

    Axis = ~/ListAxis/Horizontal
    GaugeComponentNames = [<ElementName> + "Value"]

    HasBackground = true
    BackgroundBlockColorToken = "Noir"
    BackgroundLocalRenderLayer = <LocalRenderLayer>
    LocalRenderLayer = <LocalRenderLayer>+2

    Components =
    [
        BUCKSimpleGaugeValueDescriptor
        (
            ElementName = <ElementName> + "Value"
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [0.0, 1.0]
                AlignementToFather     = [0.0, 0.5]
                AlignementToAnchor     = [0.0, 0.5]
            )

            HasBackground = true
            BackgroundBlockColorToken = "White"

            GraduationThicknessToken = "1"
            GraduationColorToken = "Noir"
            BackgroundLocalRenderLayer = <LocalRenderLayer>+1
        ),
    ]
)

//----------------------------------------------------------------------
// Nombre d'unités
template UnitLabelUnitCountIconBUCKComponent
[
    Alignement : float2 = [0.0, 0.0],
    LocalRenderLayer : int,
    IsForCarriedUnit : bool = false,
]
is BUCKTextDescriptor
(
    ElementName = <IsForCarriedUnit> ? 'NbCarriedUnits' : 'NbUnits'
    ComponentFrame = TUIFramePropertyRTTI
    (
        AlignementToAnchor = <Alignement>
        AlignementToFather = <Alignement>
    )

    ParagraphStyle = TParagraphStyleRTTI
    (
        Alignment = UIText_Center
        VerticalAlignment = UIText_VerticalCenter
        InterLine = 0
    )

    LocalRenderLayer = <LocalRenderLayer>+1

    HorizontalFitStyle = ~/FitStyle/FitToContent
    VerticalFitStyle = ~/FitStyle/FitToContent

    BigLineAction = ~/BigLineAction/ResizeFont
    TextPadding = TRTTILength4(Magnifiable = [1.0, 1.0, 2.0, 1.0])

    HasBackground = true
    BackgroundBlockColorToken = "SD2_Gris80"
    BackgroundLocalRenderLayer = <LocalRenderLayer>

    TextStyle = "LabelUnitNameStroke"
    TypefaceToken = "UISecondFont"
    TextColor = "Blanc"
    TextSize = ( <IsForCarriedUnit> ? "10" : "14")
)

//----------------------------------------------------------------------
// Icône d'experience
template UnitLabelUnitExperienceIconsBUCKComponent
[
    LocalRenderLayer : int,
    MagnifiableWidthHeight : float2 = [10.0, 10.0],
]
is BUCKTextureDescriptor
(
    ElementName = "LevelIcon"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = <MagnifiableWidthHeight>
        AlignementToFather = [1.0, 0.0]
        AlignementToAnchor = [1.0, 0.0]
    )

    TextureFrame   = TUIFramePropertyRTTI
    (
        RelativeWidthHeight = [1.0, 1.0]
    )

    LocalRenderLayer = <LocalRenderLayer>
    ClipTextureToComponent = false
)

//----------------------------------------------------------------------
// Message de critiques
private UnitLabelUnitLeavingDistrictBUCKComponent is BUCKContainerDescriptor
(
    ElementName = "LeavingDistrictComponent"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [100.0, 15.0]
    )

    Components =
    [
        BUCKGradientDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                MagnifiableWidthHeight = [0.0, 15.0]
                AlignementToFather = [0.5, 1.0]
                AlignementToAnchor = [0.5, 1.0]
            )

            Transition0 = 0.0
            Transition1 = 0.5
            Transition2 = 0.5
            Transition3 = 1.0

            TransitionColor0 = "Label/Gradient05"
            TransitionColor1 = "Label/Gradient1"
            IsRelative = true
            IsVertical = false

            LocalRenderLayer = 1
        ),

        BUCKTextDescriptor
        (
            ElementName = 'LeavingDistrictComponentText'
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                MagnifiableWidthHeight = [0.0, 15.0]
                AlignementToFather = [0.5, 1.0]
                AlignementToAnchor = [0.5, 1.0]
            )

            ParagraphStyle = TParagraphStyleRTTI
            (
                Alignment = UIText_Center
                VerticalAlignment = UIText_VerticalCenter
                InterLine = 0
            )

            TextStyle = "Default"

            HorizontalFitStyle = ~/FitStyle/UserDefined

            TypefaceToken = "IBM"
            BigLineAction = ~/BigLineAction/CutByDots

            TextDico = ~/LocalisationConstantes/dico_interface_ingame

            TextColor = "Cyan"
            TextSize = "UnitLabel/TextElement"

            TextToken = "DIST_LEAVE"

            LocalRenderLayer = 2
        ),

        UnitLabelUnitLeavingDistrictChronoBUCKComponent
        (
            MagnifiableOffset = [22.0, 0.0]
            AlignementToFather = [1.0, 1.0]
            AlignementToAnchor = [1.0, 1.0]
            LocalRenderLayer = 3
        ),
    ]
)

//----------------------------------------------------------------------
// Message de critiques
private UnitLabelUnitCriticalMessageBUCKComponent is BUCKContainerDescriptor
(
    ElementName = "CriticTitle"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [120.0, 15.0]
    )

    Components =
    [
        BUCKGradientDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                MagnifiableWidthHeight = [0.0, 15.0]
                AlignementToFather = [0.5, 1.0]
                AlignementToAnchor = [0.5, 1.0]
            )

            Transition0 = 0.0
            Transition1 = 0.5
            Transition2 = 0.5
            Transition3 = 1.0

            TransitionColor0 = "Label/Gradient0"
            TransitionColor1 = "Label/Gradient1"
            IsRelative = true
            IsVertical = false

            LocalRenderLayer = 1
        ),

        BUCKTextDescriptor
        (
            ElementName = 'CriticTitleText'
            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 0.0]
                MagnifiableWidthHeight = [0.0, 15.0]
                AlignementToFather = [0.5, 1.0]
                AlignementToAnchor = [0.5, 1.0]
            )

            ParagraphStyle = TParagraphStyleRTTI
            (
                Alignment = UIText_Center
                VerticalAlignment = UIText_VerticalCenter
                InterLine = 0
            )

            TextStyle = "Default"

            HorizontalFitStyle = ~/FitStyle/UserDefined

            TypefaceToken = "IBM"
            BigLineAction = ~/BigLineAction/CutByDots

            TextDico = ~/LocalisationConstantes/dico_interface_ingame

            TextColor = "UnitLabel/CriticTitle"
            TextSize = "UnitLabel/TextElement"

            LocalRenderLayer = 2
        )
    ]
)

//----------------------------------------------------------------------

private StandardLabelList is BUCKListDescriptor
(
    Axis = ~/ListAxis/Vertical
    BreadthComputationMode = ~/BreadthComputationMode/ComputeBreadthFromLargestChild

    Elements =
    [
        BUCKListElementDescriptor
        (
            ComponentDescriptor = UpperLabel(IsForMultiSelection = false)
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = BUCKContainerDescriptor
            (
                ComponentFrame = TUIFramePropertyRTTI
                (
                    MagnifiableWidthHeight = [40.0, 40.0]
                    AlignementToAnchor = [0.5, 0.0]
                    AlignementToFather = [0.5, 0.0]
                )

                IsClippable = false

                Components =
                [
                    // Icône de couverture
                    UnitLabelCoverIcon
                    (
                        IsForMultiSelection = false
                        LocalRenderLayer = 4
                    ),

                    UnitLabelBackground
                    (
                        LocalRenderLayer = 2
                    ),
                ]
            )
        ),

        BUCKListElementDescriptor(ComponentDescriptor = ~/UnitLabelUnitLeavingDistrictBUCKComponent),
        BUCKListElementDescriptor(ComponentDescriptor = ~/UnitLabelUnitCriticalMessageBUCKComponent),
    ]
)

//----------------------------------------------------------------------

private MultiSelectionLabelList is BUCKContainerDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = [100.0, 62.0]
    )

    IsClippable = true

    Components =
    [
        BUCKSensibleAreaDescriptor
        (
            ElementName = "BackgroundSensibleArea"

            ComponentFrame = TUIFramePropertyRTTI
            (
                RelativeWidthHeight = [1.0, 1.0]
            )

            Components =
            [
                PanelRoundedCorner
                (
                    ComponentFrame = TUIFramePropertyRTTI
                    (
                        RelativeWidthHeight = [1.0, 1.0]
                    )

                    BackgroundLocalRenderLayer = 1
                    BorderLocalRenderLayer = 1
                    Radius = 3
                    BackgroundBlockColorToken = 'BoutonTemps'
                    BorderLineColorToken = 'BoutonTemps'
                    HasBorder = false
                ),
            ]
        ),
        UpperLabel(IsForMultiSelection = true),
        UnitLabelCoverIcon
        (
            IsForMultiSelection = false
            LocalRenderLayer = 4
        ),
    ]
)

//----------------------------------------------------------------------
// Composant principal

private template UnitLabelUnitBUCKComponentDescriptor
[
    IsForMultiSelection : bool = false,
] is BUCKLocalLayerContainerDescriptor
(
    ElementName = "LocalLayerContainer"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableOffset  = (<IsForMultiSelection> ? [0.0, 0.0] : [0.0, 20.0])
        AlignementToFather = [0.5, 1.0]
        AlignementToAnchor = [0.5, 1.0]
    )

    FitStyle = ~/ContainerFitStyle/FitToContent
    NbLayersToLock = 6

    Components =
    [
        (<IsForMultiSelection> ? ~/MultiSelectionLabelList : ~/StandardLabelList),
    ]
)

//-------------------------------------------------------------------------------------

template UnitIconAndRightLabel
[
    IsForMultiSelection : bool,
]
is BUCKSensibleAreaDescriptor
(
    ElementName = "UnitIconSensibleArea"

    ComponentFrame = TUIFramePropertyRTTI
    (
        AlignementToAnchor = [0.5, 0.0]
        AlignementToFather = [0.5, 0.0]
    )
    FitStyle = ~/ContainerFitStyle/FitToContent

    Components =
    [
        ~/UnitLabelUnitIcon
    ] +
    (!<IsForMultiSelection> ? [
        BUCKListDescriptor
        (
            ComponentFrame = TUIFramePropertyRTTI
            (
                AlignementToFather = [1.0, 0.0]
                RelativeWidthHeight = [0.0, 1.0]
            )

            Axis = ~/ListAxis/Horizontal
            FirstMargin = TRTTILength(Magnifiable = 2.0)
            InterItemMargin = TRTTILength(Magnifiable = 2.0)
            BreadthComputationMode = ~/BreadthComputationMode/ComputeBreadthFromFrameProperty

            Elements =
            [
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = ~/UnitLabelUnitSupplyGaugeBUCKComponent
                ),
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = ~/UnitLabelUnitSupplyExtraGaugeText
                ),
                BUCKListElementDescriptor
                (
                    ComponentDescriptor = ~/SupplyFeedbackIcons
                ),
            ]
        ),
    ] : []
    )
)

//-------------------------------------------------------------------------------------

private template LabelFeedbackIcon
[
    FeedbackTexture : string,
    FeedbackRefillTexture : string,
] is TBUCKSpecificLabelFeedbackIconDescriptor
(
    ComponentFrame = TUIFramePropertyRTTI(MagnifiableWidthHeight = [24.0, 24.0])

    IsClippable = true
    TextureDrawer = "ColorMultiply"
    TextureFrame = TUIFramePropertyRTTI(RelativeWidthHeight = [1.0, 1.0])
    LocalRenderLayer = 1

    FeedbackTexture = <FeedbackTexture>
    FeedbackRefillTexture = <FeedbackRefillTexture>
)

//-------------------------------------------------------------------------------------

private SupplyFeedbackIcons is TBUCKSpecificLabelFeedbackIconsDescriptor
(
    ElementName = "FeedbackIcons"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableOffset = [0.0, 0.0]
    )

    Axis = ~/ListAxis/Horizontal
    InterItemMargin = TRTTILength(Magnifiable = 0.0)
    FirstMargin = TRTTILength()
    LastMargin = TRTTILength()

    IsClippable = true

    AnimDuration = 1.0
    AnimMinAlpha = 50

    IconEffectDescriptor = LabelFeedbackIcon
    (
        FeedbackTexture = ""
        FeedbackRefillTexture = ""
    )

    Icons = MAP
    [
        (~/InGameUnitLabelUpdateFeedbackType/Fuel, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_fuel"
                FeedbackRefillTexture = "icone_fuel_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Life, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_life"
                FeedbackRefillTexture = "icone_life_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Bullets, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_bullets"
                FeedbackRefillTexture = "icone_bullets_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Missile, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_missile"
                FeedbackRefillTexture = "icone_missile_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Shell, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_shell"
                FeedbackRefillTexture = "icone_shell_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Smoke, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_shell"
                FeedbackRefillTexture = "icone_shell_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Flamethrower, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_shell"
                FeedbackRefillTexture = "icone_shell_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Grenade, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_shell"
                FeedbackRefillTexture = "icone_shell_refill"
            )
        ),
        (~/InGameUnitLabelUpdateFeedbackType/Artillery, LabelFeedbackIcon
            (
                FeedbackTexture = "icone_shell"
                FeedbackRefillTexture = "icone_shell_refill"
            )
        ),
    ]
)

//-------------------------------------------------------------------------------------
// nom & nb unités d'infanterie
private template UnitNameList
[
    IsForMultiSelection : bool = false,
    IsForCarriedUnit : bool = false,
    LocalRenderLayer : int,
] is BUCKListDescriptor
(
    ElementName = <IsForCarriedUnit> ? "CarriedUnitNameList" : "UnitNameList"
    ComponentFrame = TUIFramePropertyRTTI
    (
        AlignementToAnchor = [0.5, 0.0]
        AlignementToFather = [0.5, 0.0]
    )

    Axis = ~/ListAxis/Horizontal

    BreadthComputationMode = ~/BreadthComputationMode/ComputeBreadthFromLargestChild

    InterItemMargin = TRTTILength(Magnifiable = 0.0)

    Elements =
    [
        BUCKListElementDescriptor
        (
            ComponentDescriptor = UnitLabelUnitCountIconBUCKComponent
            (
                IsForCarriedUnit = <IsForCarriedUnit>
                LocalRenderLayer = <LocalRenderLayer>
            )
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = UnitLabelUnitNameBUCKComponent
            (
                IsForMultiSelection = <IsForMultiSelection>
                IsForCarriedUnit = <IsForCarriedUnit>
                LocalRenderLayer = <LocalRenderLayer>
            )
        ),
    ]
)

//-------------------------------------------------------------------------------------

// nom & nb unités d'infanterie
private template UnitNameListSensibleArea
[
    ComponentFrame : TUIFramePropertyRTTI = TUIFramePropertyRTTI
    (
        AlignementToAnchor = [0.5, 0.0]
        AlignementToFather = [0.5, 0.0]
    ),
    IsForMultiSelection : bool = false,
    IsForCarriedUnit : bool = false,
    LocalRenderLayer : int,
]
is BUCKSensibleAreaDescriptor
(
    ElementName = <IsForCarriedUnit> ? "CarriedUnitNameListSensibleArea" : "UnitNameListSensibleArea"

    ComponentFrame = <ComponentFrame>

    FitStyle = ~/ContainerFitStyle/FitToContent
    IsClippable = false

    Components =
    [
        UnitNameList
        (
            IsForMultiSelection = false
            IsForCarriedUnit = <IsForCarriedUnit>
            LocalRenderLayer = <LocalRenderLayer>
        )
    ]
)

//-------------------------------------------------------------------------------------
private template UpperLabel
[
    IsForMultiSelection : bool = false,
]
is BUCKListDescriptor
(
    ElementName = "UpperLabel"
    ComponentFrame = TUIFramePropertyRTTI
    (
        MagnifiableWidthHeight = (<IsForMultiSelection> ? [100.0, 0.0] : [250.0, 0.0])
        AlignementToFather = [0.5, 0.0]
        AlignementToAnchor = [0.5, 0.0]
    )

    Axis = ~/ListAxis/Vertical

    // Penser a modifier la taille en Pixel du LabelUnitBUCKComponent si on aggrandit ce composant !
    Elements =
    [
        BUCKListElementDescriptor(ComponentDescriptor = ~/UnitLabelUnitEvacIconBUCKComponent),
        BUCKListElementDescriptor(ComponentDescriptor = ~/UnitLabelUnitPlayerNameBUCKComponent),
        BUCKListElementDescriptor(ComponentDescriptor = UnitLabelUnitReloadIconBUCKComponent(LocalRenderLayer = 1)),

        BUCKListElementDescriptor
        (
            ComponentDescriptor = BUCKContainerDescriptor
            (
                ComponentFrame = TUIFramePropertyRTTI
                (
                    //MagnifiableWidthHeight = [100.0, 14.0]
                    AlignementToFather = [0.5, 0.0]
                    AlignementToAnchor = [0.5, 0.0]
                )

                FitStyle = (<IsForMultiSelection> ? ~/ContainerFitStyle/FitToContent : ~/ContainerFitStyle/MaxBetweenUserDefinedAndContent)
                //ClipContent = true
                Components =
                [
                    <IsForMultiSelection> ? UnitNameList
                    (
                        IsForMultiSelection = true
                        IsForCarriedUnit = false
                        LocalRenderLayer = 1
                    )
                    : UnitNameListSensibleArea
                    (
                        IsForCarriedUnit = false
                        LocalRenderLayer = 1
                    )
                ]
            )
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = UnitLabelUnitMoraleGaugeBUCKComponent
            (
                ElementName = "MoraleGaugeNameOnly"
                LocalRenderLayer = 1
            )
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = UnitIconAndRightLabel
            (
                IsForMultiSelection = <IsForMultiSelection>
            )
        ),
        BUCKListElementDescriptor
        (
            ComponentDescriptor = (
                <IsForMultiSelection> ? UnitNameList
                (
                    IsForMultiSelection = true
                    IsForCarriedUnit = true
                    LocalRenderLayer = 1
                )
                : UnitNameListSensibleArea
                (
                    IsForCarriedUnit = true
                    LocalRenderLayer = 1
                )
            )
        ),
    ]
)

//-------------------------------------------------------------------------------------
// L'etiquette
template UISpecificInGameUnitLabelViewDescriptor
[
    MainComponentDescriptor : TBUCKContainerDescriptor
]
is TUISpecificInGameUnitLabelViewDescriptor
(
    MainComponentDescriptor = <MainComponentDescriptor>

    // Animation Stealthed
    // Temps de durée d'un blink
    AnimStealthedBlinkDuration = 2.0
    // Animation Panicked
    // Temps de durée d'un blink
    AnimPanickedBlinkDuration = 1.5
    // Animation Shaken
    // Temps de pause entre les séries de blink (0 => pas de pause)
    AnimShakenPauseTime = 3.0
    // Temps de durée d'un blink
    AnimShakenBlinkDuration = 1.5
    // Nombre de blinks par série (-1 => infini)
    AnimShakenNbBlinks = 3
    // Alpha Minimum atteint pour les animation de "suppress"
    SuppressAnimAlphaMinimum = 20
    // Alpha Minimum atteint pour l'animation "cachée"
    StealthedAnimAlphaMinimum = 20

    CommonAggregateHeight = ~/UnitLabelAggregationHeight
    NameOnlyAggregateHeight = 18.0

    // Valeur de transparence de la version de l'étiquette pour les ghost
    GhostLabelVersionTransparency = 0.5
    GhostLabelDeploymentVersionTransparency = 0.9

    // Colors for morale gauge
    MoraleGaugeTiers = [0.25, 0.5, 0.75, 1.0]
    MoraleGaugeColors = ["pi3", "pi2", "pi1", "score_05", "score_05" ]

    // HP value of each HP square.
    // If it equals 1, a 12 HP unit will display 12 HP squares on its label. It if equals 2, 6 HP squares will be displayed.
    HPElementHealthValue = 2
    MagnifiableWidthOneHPLabelBlock = 5.0

    NbMaxCharInExtraSupplyGauge = 5
    TokenFormatExtraSupplyGaugeWhenOverflow = "FMTSUPOVF"

    // Textures
    CoverTypeToTexture = MAP
    [
        (ECoverTypeForInterface/Light, "CommonTexture_Couvert_Moyen"),
        (ECoverTypeForInterface/Batiment, "CommonTexture_Couvert_Lourd"),
    ]
    DefaultCarriedUnitIcon          = ""
    DefaultSpecialtyIcon            = "Spec_bombes_1"
    AceBackgroundTexture            = "CommonTexture_Etiquette_Background_Ace"
    NormalBackgroundTexture         = "CommonTexture_Label_Background"

    // Couleurs du reticule de visee
    AimingDefaultColor = "Cyan"
    AimingWhileMovingColor = "Cyan50p"

    ReloadingDefaultColor = "Vert"
    ReloadingWhileMovingColor = "Vert50p"

    // Smart Orders
    SmartOrderLabelTokens = MAP
    [
        // Faire le lien avec PlayerMissionConstantes.ndf
        (
            1,
            "ORD_AIATTS"
        ),
        (
            2,
            "ORD_AIDEFS"
        ),
        (
            4,
            "ORD_AIARFS"
        ),
        (
            5,
            "ORD_AIARCS"
        ),
        (
            6,
            "ORD_AIARAS"
        ),
        (
            7,
            "ORD_AIAAAS"
        ),
        (
            9,
            "ORD_AISUPL"
        ),
        (
            10,
            "ORD_INVLS"
        ),
    ]

    // Resources
    UnitLabelResources = ~/SpecificInGameUnitLabelResources
)

//-------------------------------------------------------------------------------------

template UISpecificUnitLabelViewDescriptor
[
    IsForMultiSelection : bool = false,
] is UISpecificInGameUnitLabelViewDescriptor
(
    MainComponentDescriptor = UnitLabelUnitBUCKComponentDescriptor(IsForMultiSelection = <IsForMultiSelection>)
)
